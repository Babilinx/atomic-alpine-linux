#!/bin/ash
# vim: set ts=4:

# This hook is only meant to be run inside a future snapshot when chroot-ing into it.
#TODO: detect for chroot env
set -euo pipefail

readonly HOOK_NAME='alpine-immutable'
readonly SHAPSHOT="$(cat /usr/share/aal/snapshot-name)"

# Defaults
cmdline=
signing_cert='/etc/uefi-keys/db.crt'
signing_key='/etc/uefi-keys/db.key'
enable_secureboot=no
openssl_engine=
microcode=
splash_image='/dev/null'
output_dir='/efi/Alpine'
output_name='linux-{flavor}-{snapshot}.efi'
backup_old=yes
skip_flavors=
efistub_file='/usr/lib/stubbyboot/linux{march}.efi.stub'

die() {
	printf "$HOOK_NAME: %s\n" "$2" >&2
	exit $1
}


if [ $# -lt 2 ]; then
	echo "Usage: $0 <flavor> <new-version> <old-version>" >&2
	exit 1
fi

readonly FLAVOR=$1
readonly NEW_VERSION=$2
readonly OLD_VERSION=${3:-}
case "$(cat /etc/apk/arch)" in
	aarch64) readonly MARCH="aa64";;
	arm*)    readonly MARCH="arm";;
	riscv64) readonly MARCH="riscv64";;
	x86)     readonly MARCH="ia32";;
	x86_64)  readonly MARCH="x64";;
esac

# Hook triggered for the kernel removal, nothing to do here.
[ "$NEW_VERSION" ] || exit 0

. /etc/kernel-hooks.d/aal-boot.conf

[ "$skip_flavors" ] && for flavor in $skip_flavors; do
	[ "$flavor" = "$FLAVOR" ] \
		&& die 0 "==> skipping UEFI image creation for $FLAVOR kernel"
done

[ "$cmdline" ] \
	|| die 0 "cmdline is not specified in /etc/kernel-hooks.d/$HOOK_NAME.conf, skipping hook!"

if [ "$enable_secureboot" != no ]; then
	[ -r "$signing_cert" ] \
		|| die 2 "ERROR: signing cert '$signing_cert' does not exist or not readable!"

	[ -r "$signing_key" ] \
		|| die 2 "ERROR: signing key '$signing_key' does not exist or not readable!"
fi

vmlinuz="/boot/vmlinuz-$FLAVOR"
output_name=$(echo "$output_name" \
	| sed "s/{flavor}/$FLAVOR/; s/{version}/$NEW_VERSION/"; "s/{snapshot}/$SNAPSHOT/")
output="$output_dir/$output_name"
efistub_file=$(echo "$efistub_file" | sed "s/{march}/$MARCH/")

[ "$microcode" ] || for path in /boot/intel-ucode.img /boot/amd-ucode.img; do
	[ -f "$path" ] && microcode="$path"
done

tmpdir=$(mktemp -dt "$HOOK_NAME.XXXXXX")
trap "rm -f '$tmpdir'/*; rmdir '$tmpdir'" EXIT HUP INT TERM

if [ "$backup_old" = yes ] && [ -f "$output" ]; then
	cp -a "$output" "$output.bak"
fi

/sbin/mkinitfs -o "$tmpdir"/initramfs "$NEW_VERSION-$FLAVOR"

echo "==> $HOOK_NAME: creating UEFI Unified Kernel Image with $vmlinuz"
cmdline=$(echo "$cmdline" | sed "s/{snapshot}/$SNAPSHOT/")
/usr/bin/efi-mkuki \
	-c "$cmdline" \
	-s "$splash_image" \
	-S "$efistub_file" \
	-o "$tmpdir"/unsigned.efi \
	"$vmlinuz" $microcode "$tmpdir"/initramfs

mkdir -p "$output_dir"

if [ "$enable_secureboot" = no ]; then
    echo "==> $HOOK_NAME [INFO]: secureboot support is disable"
	echo "==> $HOOK_NAME: writing *unsigned* UEFI image to $output"
	mv "$tmpdir"/unsigned.efi "$output"
else
	echo "==> $HOOK_NAME: signing UEFI image and writing to $output"
	/usr/bin/sbsign \
		--cert "$signing_cert" \
		--key "$signing_key" \
		--output "$output" \
		${openssl_engine:+--engine $openssl_engine} \
		"$tmpdir"/unsigned.efi \
		2>&1 | { grep -Fv -e ' gaps between PE/COFF ' -e 'Signing Unsigned ' ||:; } >&2
		# this is not an issue ^
fi

echo "==> $HOOK_NAME: adding UEFI Unified Kernel Image in UEFI bootloader"
efi_part_name=$(blkid | grep "LABEL=\"EFI\"" | cut -d ' ' -f 1)
if [ "$efi_part_name" = *"nvme"* ]; then
    # Remove first 13 chars: '/dev/nvme0n1p' in '/dev/nvme0n1p1:'
    efi_part_number=$(sed '13s/^.//' <<<"$efi_part_name" | tr -dc '0-9')
    # Remove last 3 chars: 'p1:' in '/dev/nvme0n1p1:'
    efi_part_name=$(sed 's/.\{3\}$//' <<<"$efi_part_name")
else
    # Remove first 8 chars: '/dev/sda' in '/dev/sda1:'
    efi_part_number=$(sed '8s/^.//' <<<"$efi_part_name"| tr -dc '0-9' )
    # Remove last 2 chars: '1:' in '/dev/sda1:'
    efi_part_name=$(sed 's/.\{2\}$//' <<<"$efi_part_name")
fi
label=$(sed 's/.\{8\}$//' <<<"$SNAPSHOT")
efibootmgr --disk $efi_part_name --part $efi_part_number --create --label "Alpine Linux - $label" --load /Alpine/linux-lts.efi --quiet || \
die 1 "ERROR: Can't create EFI entry. The snapshot '$SNAPSHOT' is unbootable!"

# Just a simple sanity check.
dir="/${output_dir#/}"
while [ "$dir" ]; do
	mount -t vfat | grep -Fq " on $dir type vfat " && exit 0
	dir=${dir%/*}
done
die 0 "WARNING: $output_dir is not on UEFI System Partition as it should be!"
